version: "3.8"

networks:
  backend:
    driver: bridge

services:
  user:
    build: user
    ports:
      - "8000:8000"
    environment:
      PORT: "8000"
      DB_USERNAME: "postgres"
      DB_PASSWORD: "postgres"
      DB_HOST: "postgres_container_user"
      DB_PORT: "5432"
      DB_NAME: "user"
      AMQP_HOST: amqp://guest:guest@rabbitmq:5672/
    depends_on:
      - postgres_user
      - rabbitmq
    restart: always
    networks:
      - backend

  postgres_user:
    container_name: postgres_container_user
    image: postgres:13-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: user
    volumes:
      - pg_data_user:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    restart: always
    networks:
      - backend

  survey:
    build: survey
    ports:
      - "8001:8001"
    environment:
      PORT: "8001"
      DB_USERNAME: "postgres"
      DB_PASSWORD: "postgres"
      DB_HOST: "postgres_container_survey"
      DB_PORT: "5432"
      DB_NAME: "survey"
      AMQP_HOST: amqp://guest:guest@rabbitmq:5672/
      MINIO_HOST: "minio:9000"
      MINIO_PORT: "9000"
      MINIO_ACCESS_KEY: "minioadmin"
      MINIO_SECRET_KEY: "minioadmin"
      MINIO_BUCKET: "survey-images"
      MINIO_USE_SSL: "false"
    depends_on:
      - postgres_survey
      - rabbitmq
      - minio
    restart: always
    networks:
      - backend

  postgres_survey:
    container_name: postgres_container_survey
    image: postgres:13-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: survey
    volumes:
      - pg_data_survey:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    restart: always
    networks:
      - backend

  payment:
    build: payment
    ports:
      - "8002:8002"
    environment:
      PORT: "8002"
      DB_USERNAME: "postgres"
      DB_PASSWORD: "postgres"
      DB_HOST: "postgres_container_payment"
      DB_PORT: "5432"
      DB_NAME: "payment"
      AMQP_HOST: amqp://guest:guest@rabbitmq:5672/
    depends_on:
      - postgres_payment
      - rabbitmq
    restart: always
    networks:
      - backend

  postgres_payment:
    container_name: postgres_container_payment
    image: postgres:13-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: payment
    volumes:
      - pg_data_payment:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    restart: always
    networks:
      - backend

  responden:
    build: responden
    ports:
      - "8003:8003"
    environment:
      PORT: "8003"
      DB_USERNAME: "postgres"
      DB_PASSWORD: "postgres"
      DB_HOST: "postgres_container_responden"
      DB_PORT: "5432"
      DB_NAME: "responden"
      AMQP_HOST: amqp://guest:guest@rabbitmq:5672/
    depends_on:
      - postgres_responden
      - rabbitmq
    restart: always
    networks:
      - backend

  postgres_responden:
    container_name: postgres_container_responden
    image: postgres:13-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: responden
    volumes:
      - pg_data_responden:/var/lib/postgresql/data
    ports:
      - "5436:5432"
    restart: always
    networks:
      - backend

  # API Instances (4 active + 1 backup)
  api1:
    build: api
    environment:
      BASE_URL_USER: "http://user:8000"
      BASE_URL_SURVEY: "http://survey:8001"
      BASE_URL_PAYMENT: "http://payment:8002"
      BASE_URL_RESPONDEN: "http://responden:8003"
    networks:
      - backend

  api2:
    build: api
    environment:
      BASE_URL_USER: "http://user:8000"
      BASE_URL_SURVEY: "http://survey:8001"
      BASE_URL_PAYMENT: "http://payment:8002"
      BASE_URL_RESPONDEN: "http://responden:8003"
    networks:
      - backend

  api3:
    build: api
    environment:
      BASE_URL_USER: "http://user:8000"
      BASE_URL_SURVEY: "http://survey:8001"
      BASE_URL_PAYMENT: "http://payment:8002"
      BASE_URL_RESPONDEN: "http://responden:8003"
    networks:
      - backend

  api4:
    build: api
    environment:
      BASE_URL_USER: "http://user:8000"
      BASE_URL_SURVEY: "http://survey:8001"
      BASE_URL_PAYMENT: "http://payment:8002"
      BASE_URL_RESPONDEN: "http://responden:8003"
    networks:
      - backend

  api5:
    build: api
    environment:
      BASE_URL_USER: "http://user:8000"
      BASE_URL_SURVEY: "http://survey:8001"
      BASE_URL_PAYMENT: "http://payment:8002"
      BASE_URL_RESPONDEN: "http://responden:8003"
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq-local
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
      - rabbitmq_log:/var/log/rabbitmq
    networks:
      - backend

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server --console-address ":9001" /data
    volumes:
      - minio_data:/data
    restart: always
    networks:
      - backend

  nginx:
    image: nginx:stable
    container_name: nginx-reverse-proxy
    ports:
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api1
      - api2
      - api3
      - api4
      - api5
      - minio
    restart: always
    networks:
      - backend

volumes:
  pg_data_user:
  pg_data_survey:
  pg_data_payment:
  pg_data_responden:
  rabbitmq_data:
  minio_data:
  rabbitmq_log:
    driver: local
